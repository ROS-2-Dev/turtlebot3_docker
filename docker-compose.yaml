services:
  # Base image containing dependencies.
  base:
    image: turtlebot3:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        ROS_DISTRO: ${ROS_DISTRO::-iron}
      target: base
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    ports:
      - "127.0.0.1:9090:9090"
    # Needed to display graphical applications
    privileged: True
    environment:
      # Needed to define a TurtleBot3 model type
      - TURTLEBOT3_MODEL=${TURTLEBOT3_MODEL:-waffle_pi}
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority

  # Overlay image containing the example source code.
  overlay:
    extends: base
    image: turtlebot3:overlay
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: overlay

  # Developer container
  dev:
    extends: overlay
    image: turtlebot3:dev
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: dev
      args:
        - UID=${UID:-1000}
        - GID=${UID:-1000}
        - USERNAME=${USERNAME:-devuser}
    volumes:
      # Mount the source code
      - ./tb3_autonomy:/overlay_ws/src/tb3_autonomy:rw
      - ./tb3_rosbridge:/overlay_ws/src/tb3_rosbridge:rw
      # Mount colcon build artifacts for faster rebuilds
      - ./.colcon/build/:/overlay_ws/build/:rw
      - ./.colcon/install/:/overlay_ws/install/:rw
      - ./.colcon/log/:/overlay_ws/log/:rw
    user: ${USERNAME:-devuser}
    command: sleep infinity

  tb3_nav:
    extends: overlay
    command: ros2 launch tb3_rosbridge tb3_nav2_web_launch.py
